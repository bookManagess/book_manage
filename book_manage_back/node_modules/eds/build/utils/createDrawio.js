const path = require('path');
const cheerio = require('cheerio');
const chalk = require('chalk');
const _ = require('lodash');
const arrayToTree = require('array-to-tree');

const matchMxgraphHTML = require('./matchMxgraphHTML.js');
const matchMxgraphXMLRowData = require('./matchMxgraphXMLRowData.js');
const parseDrawio = require('./parseDrawio.js');
const searchTree = require('./searchTree.js');
const decompress = parseDrawio.decompress;
const compress = parseDrawio.compress;

module.exports = function createDrawio (file, sitemap, drawio) {
  const html = file.contents.toString();
  const $ = cheerio.load(html);
  const fileName = path.basename(file.path, '.html');
  const folderName = path.dirname(file.path).split(path.sep).pop();
  const $mxgraph = $('.mxgraph');
  let mxgraph = $mxgraph.data('mxgraph');
  const rowDatas = matchMxgraphXMLRowData(mxgraph.xml);
  _.forEach(rowDatas, (rowData) => {
    let htmlString = decompress(rowData);
    
    if (folderName === 'functionalmap') {
      const version = path.dirname(file.path).split(path.sep).splice(-3)[0];
      const functionalmap = drawio[version].functionalmap;

      // create pages' link
      const node = searchTree(arrayToTree(sitemap[version], {
        parentProperty: 'parent',
      })[0], fileName);
      if (node === void 0) console.log(chalk.red(`Detected undefined functionalmap ${fileName} at sitemap. Please fix it.`));
      else {
        if (node.children) {
          let childPage = 'Next Page: ';
          _.forEach(node.children, (child) => {
            childPage += `<a href="${child.id}.html">${child.text.name}</a>, `;
          });
          $('body').prepend(`<p>${childPage}</p>`);
        }
        if (node.parent) {
          const parentIndex = _.findIndex(sitemap[version], el => el.id === node.parent);
          const parentPage = `Prev Page: <a href="${node.parent}.html">${sitemap[version][parentIndex].text.name}</a>`;
          $('body').prepend(`<p>${parentPage}</p>`);
        }
      }
  
      // create flowcharts' link
      if (functionalmap[fileName]) {
        // search key to replace what you want and also you can customize it
        matchMxgraphHTML({
          htmlString,
          file,
        }, (match, mappingName) => {
          const elm = functionalmap[fileName][mappingName];
          if (elm) htmlString = htmlString.replace(`(${match[1]})`, `&lt;a href=&quot;../flowchart/${elm.link}&quot;&gt;${elm.name}&lt;/a&gt;`);
        });
      }
    }
  
    // create apis' link
    if (folderName === 'flowchart') {
      const version = path.dirname(file.path).split(path.sep).splice(-3)[0];
      const apis = drawio[version].flowchart.apis;
      const javaDoc = drawio[version].flowchart.javaDoc;
      if (apis[fileName]) {
        // search key to replace what you want and also you can customize it
        matchMxgraphHTML({
          htmlString,
          file,
        }, (match, mappingName) => {
          const elm = apis[fileName][mappingName];
          if (elm) htmlString = htmlString.replace(`(${match[1]})`, `&lt;a href=&quot;${javaDoc}/${elm.controller}/${elm.name}.html&quot;&gt;${elm.name}&lt;/a&gt;`);
        });
      }
    }
    mxgraph.xml = mxgraph.xml.replace(rowData, compress(htmlString));
  });
  $mxgraph.attr('data-mxgraph', JSON.stringify(mxgraph));
  return $.html();
}